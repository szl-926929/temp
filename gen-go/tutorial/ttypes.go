// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package tutorial

import (
	"bytes"
	"context"
	"fmt"
	"sync"

	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	shared0 "github.com/suitable/gen-go/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = shared0.GoUnusedProtection__
var GoUnusedProtection__ int

//You can define enums, which are just 32 bit integers. Values are optional
//and start at 1 if not supplied, C style again.
type Operation int64

const (
	Operation_ADD      Operation = 1
	Operation_SUBTRACT Operation = 2
	Operation_MULTIPLY Operation = 3
	Operation_DIVIDE   Operation = 4
)

var OperationToName = map[Operation]string{
	Operation_ADD:      "ADD",
	Operation_SUBTRACT: "SUBTRACT",
	Operation_MULTIPLY: "MULTIPLY",
	Operation_DIVIDE:   "DIVIDE",
}

var OperationToValue = map[string]Operation{
	"ADD":      Operation_ADD,
	"SUBTRACT": Operation_SUBTRACT,
	"MULTIPLY": Operation_MULTIPLY,
	"DIVIDE":   Operation_DIVIDE,
}

var OperationNames = []string{
	"ADD",
	"SUBTRACT",
	"MULTIPLY",
	"DIVIDE",
}

var OperationValues = []Operation{
	Operation_ADD,
	Operation_SUBTRACT,
	Operation_MULTIPLY,
	Operation_DIVIDE,
}

func (p Operation) String() string {
	if v, ok := OperationToName[p]; ok {
		return v
	}
	return "<UNSET>"
}

func OperationFromString(s string) (Operation, error) {
	if v, ok := OperationToValue[s]; ok {
		return v, nil
	}
	return Operation(0), fmt.Errorf("not a valid Operation string")
}

func OperationPtr(v Operation) *Operation { return &v }

//Thrift lets you do typedefs to get pretty names for your types. Standard
//C style here.
type MyInteger = int32

func MyIntegerPtr(v MyInteger) *MyInteger { return &v }

// Structs are the basic complex data structures. They are comprised of fields
// which each have an integer identifier, a type, a symbolic name, and an
// optional default value.
//
// Fields can be declared "optional", which ensures they will not be included
// in the serialized output if they aren't set.  Note that this requires some
// manual management in some languages.
//
// Attributes:
//  - Num1
//  - Num2
//  - Op
//  - Comment
type WorkIns struct {
	Num1    int32     `thrift:"num1,1" db:"num1" json:"num1"`
	Num2    int32     `thrift:"num2,2" db:"num2" json:"num2"`
	Op      Operation `thrift:"op,3" db:"op" json:"op"`
	Comment *string   `thrift:"comment,4,optional" db:"comment" json:"comment,omitempty"`
}

func NewWorkIns() *WorkIns {
	return &WorkIns{}
}

func (p *WorkIns) GetNum1() int32 {
	return p.Num1
}

func (p *WorkIns) GetNum2() int32 {
	return p.Num2
}

func (p *WorkIns) GetOp() Operation {
	return p.Op
}

var WorkIns_Comment_DEFAULT string

func (p *WorkIns) GetComment() string {
	if !p.IsSetComment() {
		return WorkIns_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *WorkIns) IsSetComment() bool {
	return p != nil && p.Comment != nil
}

type WorkInsBuilder struct {
	obj *WorkIns
}

func NewWorkInsBuilder() *WorkInsBuilder {
	return &WorkInsBuilder{
		obj: NewWorkIns(),
	}
}

func (p WorkInsBuilder) Emit() *WorkIns {
	return &WorkIns{
		Num1:    p.obj.Num1,
		Num2:    p.obj.Num2,
		Op:      p.obj.Op,
		Comment: p.obj.Comment,
	}
}

func (w *WorkInsBuilder) Num1(num1 int32) *WorkInsBuilder {
	w.obj.Num1 = num1
	return w
}

func (w *WorkInsBuilder) Num2(num2 int32) *WorkInsBuilder {
	w.obj.Num2 = num2
	return w
}

func (w *WorkInsBuilder) Op(op Operation) *WorkInsBuilder {
	w.obj.Op = op
	return w
}

func (w *WorkInsBuilder) Comment(comment *string) *WorkInsBuilder {
	w.obj.Comment = comment
	return w
}

func (w *WorkIns) SetNum1(num1 int32) *WorkIns {
	w.Num1 = num1
	return w
}

func (w *WorkIns) SetNum2(num2 int32) *WorkIns {
	w.Num2 = num2
	return w
}

func (w *WorkIns) SetOp(op Operation) *WorkIns {
	w.Op = op
	return w
}

func (w *WorkIns) SetComment(comment *string) *WorkIns {
	w.Comment = comment
	return w
}

func (p *WorkIns) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkIns) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Num1 = v
	}
	return nil
}

func (p *WorkIns) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Num2 = v
	}
	return nil
}

func (p *WorkIns) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Operation(v)
		p.Op = temp
	}
	return nil
}

func (p *WorkIns) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *WorkIns) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("WorkIns"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkIns) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("num1", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Num1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err)
	}
	return err
}

func (p *WorkIns) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("num2", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Num2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err)
	}
	return err
}

func (p *WorkIns) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("op", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:op: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:op: ", p), err)
	}
	return err
}

func (p *WorkIns) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comment: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comment (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comment: ", p), err)
		}
	}
	return err
}

func (p *WorkIns) String() string {
	if p == nil {
		return "<nil>"
	}

	num1Val := fmt.Sprintf("%v", p.Num1)
	num2Val := fmt.Sprintf("%v", p.Num2)
	opVal := fmt.Sprintf("%v", p.Op)
	var commentVal string
	if p.Comment == nil {
		commentVal = "<nil>"
	} else {
		commentVal = fmt.Sprintf("%v", *p.Comment)
	}
	return fmt.Sprintf("WorkIns({Num1:%s Num2:%s Op:%s Comment:%s})", num1Val, num2Val, opVal, commentVal)
}

// Attributes:
//  - Num1
//  - Op
//  - Comment
//  - Nest
//  - Strs
//  - StrM
type Work struct {
	Num1 int32 `thrift:"num1,1" db:"num1" json:"num1"`
	// unused field # 2
	Op      Operation         `thrift:"op,3" db:"op" json:"op"`
	Comment *string           `thrift:"comment,4,optional" db:"comment" json:"comment,omitempty"`
	Nest    *WorkIns          `thrift:"nest,5" db:"nest" json:"nest"`
	Strs    []string          `thrift:"strs,6" db:"strs" json:"strs"`
	StrM    map[string]string `thrift:"strM,7" db:"strM" json:"strM"`
}

func NewWork() *Work {
	return &Work{
		Nest: NewWorkIns(),
	}
}

func (p *Work) GetNum1() int32 {
	return p.Num1
}

func (p *Work) GetOp() Operation {
	return p.Op
}

var Work_Comment_DEFAULT string

func (p *Work) GetComment() string {
	if !p.IsSetComment() {
		return Work_Comment_DEFAULT
	}
	return *p.Comment
}

var Work_Nest_DEFAULT *WorkIns

func (p *Work) GetNest() *WorkIns {
	if !p.IsSetNest() {
		return Work_Nest_DEFAULT
	}
	return p.Nest
}

func (p *Work) GetStrs() []string {
	return p.Strs
}

func (p *Work) GetStrM() map[string]string {
	return p.StrM
}
func (p *Work) IsSetComment() bool {
	return p != nil && p.Comment != nil
}

func (p *Work) IsSetNest() bool {
	return p != nil && p.Nest != nil
}

type WorkBuilder struct {
	obj *Work
}

func NewWorkBuilder() *WorkBuilder {
	return &WorkBuilder{
		obj: NewWork(),
	}
}

func (p WorkBuilder) Emit() *Work {
	return &Work{
		Num1:    p.obj.Num1,
		Op:      p.obj.Op,
		Comment: p.obj.Comment,
		Nest:    p.obj.Nest,
		Strs:    p.obj.Strs,
		StrM:    p.obj.StrM,
	}
}

func (w *WorkBuilder) Num1(num1 int32) *WorkBuilder {
	w.obj.Num1 = num1
	return w
}

func (w *WorkBuilder) Op(op Operation) *WorkBuilder {
	w.obj.Op = op
	return w
}

func (w *WorkBuilder) Comment(comment *string) *WorkBuilder {
	w.obj.Comment = comment
	return w
}

func (w *WorkBuilder) Nest(nest *WorkIns) *WorkBuilder {
	w.obj.Nest = nest
	return w
}

func (w *WorkBuilder) Strs(strs []string) *WorkBuilder {
	w.obj.Strs = strs
	return w
}

func (w *WorkBuilder) StrM(strM map[string]string) *WorkBuilder {
	w.obj.StrM = strM
	return w
}

func (w *Work) SetNum1(num1 int32) *Work {
	w.Num1 = num1
	return w
}

func (w *Work) SetOp(op Operation) *Work {
	w.Op = op
	return w
}

func (w *Work) SetComment(comment *string) *Work {
	w.Comment = comment
	return w
}

func (w *Work) SetNest(nest *WorkIns) *Work {
	w.Nest = nest
	return w
}

func (w *Work) SetStrs(strs []string) *Work {
	w.Strs = strs
	return w
}

func (w *Work) SetStrM(strM map[string]string) *Work {
	w.StrM = strM
	return w
}

func (p *Work) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Work) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Num1 = v
	}
	return nil
}

func (p *Work) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Operation(v)
		p.Op = temp
	}
	return nil
}

func (p *Work) ReadField4(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *Work) ReadField5(iprot thrift.Protocol) error {
	p.Nest = NewWorkIns()
	if err := p.Nest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Nest), err)
	}
	return nil
}

func (p *Work) ReadField6(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Strs = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Strs = append(p.Strs, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Work) ReadField7(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.StrM = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.StrM[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Work) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("Work"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Work) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("num1", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Num1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err)
	}
	return err
}

func (p *Work) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("op", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:op: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:op: ", p), err)
	}
	return err
}

func (p *Work) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comment: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comment (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comment: ", p), err)
		}
	}
	return err
}

func (p *Work) writeField5(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("nest", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nest: ", p), err)
	}
	if err := p.Nest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Nest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nest: ", p), err)
	}
	return err
}

func (p *Work) writeField6(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("strs", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:strs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Strs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Strs {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:strs: ", p), err)
	}
	return err
}

func (p *Work) writeField7(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("strM", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:strM: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StrM)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.StrM {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:strM: ", p), err)
	}
	return err
}

func (p *Work) String() string {
	if p == nil {
		return "<nil>"
	}

	num1Val := fmt.Sprintf("%v", p.Num1)
	opVal := fmt.Sprintf("%v", p.Op)
	var commentVal string
	if p.Comment == nil {
		commentVal = "<nil>"
	} else {
		commentVal = fmt.Sprintf("%v", *p.Comment)
	}
	var nestVal string
	if p.Nest == nil {
		nestVal = "<nil>"
	} else {
		nestVal = fmt.Sprintf("%v", p.Nest)
	}
	strsVal := fmt.Sprintf("%v", p.Strs)
	strMVal := fmt.Sprintf("%v", p.StrM)
	return fmt.Sprintf("Work({Num1:%s Op:%s Comment:%s Nest:%s Strs:%s StrM:%s})", num1Val, opVal, commentVal, nestVal, strsVal, strMVal)
}

// Structs can also be exceptions, if they are nasty.
//
// Attributes:
//  - WhatOp
//  - Why
type InvalidOperation struct {
	WhatOp int32  `thrift:"whatOp,1" db:"whatOp" json:"whatOp"`
	Why    string `thrift:"why,2" db:"why" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
	return &InvalidOperation{}
}

func (p *InvalidOperation) GetWhatOp() int32 {
	return p.WhatOp
}

func (p *InvalidOperation) GetWhy() string {
	return p.Why
}

type InvalidOperationBuilder struct {
	obj *InvalidOperation
}

func NewInvalidOperationBuilder() *InvalidOperationBuilder {
	return &InvalidOperationBuilder{
		obj: NewInvalidOperation(),
	}
}

func (p InvalidOperationBuilder) Emit() *InvalidOperation {
	return &InvalidOperation{
		WhatOp: p.obj.WhatOp,
		Why:    p.obj.Why,
	}
}

func (i *InvalidOperationBuilder) WhatOp(whatOp int32) *InvalidOperationBuilder {
	i.obj.WhatOp = whatOp
	return i
}

func (i *InvalidOperationBuilder) Why(why string) *InvalidOperationBuilder {
	i.obj.Why = why
	return i
}

func (i *InvalidOperation) SetWhatOp(whatOp int32) *InvalidOperation {
	i.WhatOp = whatOp
	return i
}

func (i *InvalidOperation) SetWhy(why string) *InvalidOperation {
	i.Why = why
	return i
}

func (p *InvalidOperation) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidOperation) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WhatOp = v
	}
	return nil
}

func (p *InvalidOperation) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Why = v
	}
	return nil
}

func (p *InvalidOperation) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("whatOp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:whatOp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.WhatOp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.whatOp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:whatOp: ", p), err)
	}
	return err
}

func (p *InvalidOperation) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err)
	}
	if err := oprot.WriteString(string(p.Why)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err)
	}
	return err
}

func (p *InvalidOperation) String() string {
	if p == nil {
		return "<nil>"
	}

	whatOpVal := fmt.Sprintf("%v", p.WhatOp)
	whyVal := fmt.Sprintf("%v", p.Why)
	return fmt.Sprintf("InvalidOperation({WhatOp:%s Why:%s})", whatOpVal, whyVal)
}

func (p *InvalidOperation) Error() string {
	return p.String()
}
